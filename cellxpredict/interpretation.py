from typing import Union

import numpy as np
import tensorflow.keras as K
from skimage.util import montage

from .visualization import to_rgb


def latent_space_traversal(
    decoder: K.models.Model,
    l1: int,
    l2: int,
    l1_values: Union[list, np.ndarray],
    l2_values: Union[list, np.ndarray],
) -> np.ndarray:
    """Produces a collage of images that are formed by passing into a decoder model
    a latent space vector that is zero-valued except in two specified positions, where
    the value in each position is displayed on each axis.

    Parameters
    ----------
    decoder: K.models.Model
        The decoder model used to transform the latent space vectors into RGB images
    l1: int
        The latent dimension whose value is represented on the x-axis.
    l2: int
        The latent dimension whose value is represented on the y-axis.
    l1_values: list or np.ndarray
        The values of l1 to display.
    l2_values: list or np.ndarray
        The values of l2 to display.

    Returns
    -------
    output_grid: np.ndarray
        An array representing the 2D collage of images generated by the
        latent space traversal.
    """
    latent_dim = decoder.layers[0].input_shape[-1]

    flat_grid_list = []

    for l1_value in l1_values:
        for l2_value in l2_values:

            latent_vector = np.zeros((latent_dim,))
            latent_vector[l1] = l1_valuea
            latent_vector[l2] = l2_value

            decoded = decoder.predict(latent_vector)
            decoded = to_rgb(decoded, axis=-1)
            decoded = decoded.astype(np.uint8)

            flat_grid_list.append(decoded)

    flat_grid = np.stack(flat_grid_list, axis=0, dtype=np.uint8)

    output_grid = montage(
        flat_grid,
        grid_shape=(len(l2_values), len(l1_values)),
        multichannel=True,
        fill=[255] * 3,
        padding_width=3,
    )

    return output_grid
